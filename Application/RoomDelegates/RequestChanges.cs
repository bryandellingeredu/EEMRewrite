using Application.Activities;
using Application.Core;
using Application.Interfaces;
using AutoMapper;
using Domain;
using MediatR;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Persistence;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Application.RoomDelegates
{
    public class RequestChanges
    {
        public class Command : IRequest<Result<Unit>>
        {
            public RoomDelegate[] RoomDelegates
            {
                get;
                set;
            }
        }
        public class Handler : IRequestHandler<Command, Result<Unit>>
        {
        private readonly IConfiguration _config;
        private readonly IUserAccessor _userAccessor;
        private readonly DataContext _context;

        public Handler(
                IConfiguration config, IUserAccessor userAccessor, DataContext context)
            {
            _config = config;
            _userAccessor = userAccessor;
            _context = context;
            }

            public async Task<Result<Unit>> Handle(Command request, CancellationToken cancellationToken)
            {
            var user = await _context.Users.FirstOrDefaultAsync(x => x.UserName == _userAccessor.GetUsername());

            var adminUsers = await _context.Users
                .Join(
                         _context.UserRoles,
                         user => user.Id,
                         userRole => userRole.UserId,
                         (user, userRole) => new { User = user, UserRole = userRole }
                      )
                     .Join(
                             _context.Roles,
                              ur => ur.UserRole.RoleId,
                             role => role.Id,
                             (ur, role) => new { ur.User, Role = role }
                             )
                             .Where(ur => ur.Role.Name == "admin")
                            .Select(ur => ur.User)
                   .ToListAsync();


            Settings s = new Settings();
            var settings = s.LoadSettings(_config);
            GraphHelper.InitializeGraph(settings, (info, cancel) => Task.FromResult(0));
                if (request.RoomDelegates.Any())
                {
                    var allrooms = await GraphHelper.GetRoomsAsync();
                    var room = allrooms.FirstOrDefault(x => x.AdditionalData["emailAddress"].ToString() == request.RoomDelegates[0].RoomEmail);
                    string title = $"A request to change room delegates for  {room.DisplayName} was requested by {user.DisplayName} with email ";
                    string body = $"<p>A request to change room delegates for  {room.DisplayName}, {request.RoomDelegates[0].RoomEmail} was requested by {user.DisplayName}</p>";
                     body = body + $"<p>---Requested Room Delegates</p>";
                    foreach (var item in request.RoomDelegates )
                    {
                        body = body + $"<p><strong>Display Name: </strong> {item.DelegateDisplayName}  <strong>Email: </strong> {item.DelegateEmail} </p>";
                    }
                    body = body + $@"<p><p/><p><p/><p> Do not forget to update the (EEM) room delegate list after you have updated the room delegates in outlook,  <a href='{settings.BaseUrl}?redirecttopage=roomDelegateTable'> EEM  Delegate Link </a></p>
              <p></p><p></p><p>DO NOT REPLY TO THIS E-MAIL. THIS MESSAGE WAS AUTOMATICALLY GENERATED BY THE SYSTEM AND IS NOT MONITORED.</p>";
                    await GraphHelper.SendEmail(adminUsers.Select(x => x.Email).Union(settings.ErrorEmailRecipients.ToArray()).ToArray(), title, body);
                }

                return Result<Unit>.Success(Unit.Value);
            }
        }
    }
}
